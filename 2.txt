// —————————————————————————–
// 6. MAIN APPLICATION COMPONENT (src/App.tsx)
// —————————————————————————–
import React from ‘react’;
import { BrowserRouter as Router, Routes, Route } from ‘react-router-dom’;
import { QueryClient, QueryClientProvider } from ‘react-query’;
import { Toaster } from ‘react-hot-toast’;
import CrewAIAppBuilder from ‘./components/CrewAIAppBuilder’;
import { ConfigProvider } from ‘./contexts/ConfigContext’;
import { ErrorBoundary } from ‘./components/ErrorBoundary’;
import ‘./App.css’;

const queryClient = new QueryClient({
defaultOptions: {
queries: {
retry: 3,
refetchOnWindowFocus: false,
},
},
});

function App() {
return (
<QueryClientProvider client={queryClient}>
<ConfigProvider>
<ErrorBoundary>
<Router>
<div className="App">
<Routes>
<Route path=”/” element={<CrewAIAppBuilder />} />
<Route path=”/builder” element={<CrewAIAppBuilder />} />
<Route path=”/dashboard” element={<CrewAIAppBuilder />} />
</Routes>
<Toaster
position=“top-right”
toastOptions={{
duration: 4000,
style: {
background: ‘#363636’,
color: ‘#fff’,
},
success: {
duration: 3000,
iconTheme: {
primary: ‘#4ade80’,
secondary: ‘#fff’,
},
},
error: {
duration: 5000,
iconTheme: {
primary: ‘#ef4444’,
secondary: ‘#fff’,
},
},
}}
/>
</div>
</Router>
</ErrorBoundary>
</ConfigProvider>
</QueryClientProvider>
);
}

export default App;

// —————————————————————————–
// 7. CONFIGURATION CONTEXT (src/contexts/ConfigContext.tsx)
// —————————————————————————–
import React, { createContext, useContext, useState, useEffect, ReactNode } from ‘react’;
import { AppConfig } from ‘../types’;
import toast from ‘react-hot-toast’;

interface ConfigContextType {
config: AppConfig;
updateConfig: (updates: Partial<AppConfig>) => void;
isLoading: boolean;
error: string | null;
}

const defaultConfig: AppConfig = {
cerebras: {
apiKey: process.env.REACT_APP_CEREBRAS_API_KEY || ‘’,
baseUrl: process.env.REACT_APP_CEREBRAS_BASE_URL || ‘https://api.cerebras.ai/v1’,
defaultModel: ‘llama-4-maverick-17b-128e-instruct’,
maxTokens: 32768,
temperature: 0.6,
},
crewai: {
apiUrl: process.env.REACT_APP_CREWAI_API_URL || ‘http://localhost:8000/v1’,
apiKey: process.env.REACT_APP_CREWAI_API_KEY || ‘’,
defaultAgents: [‘frontend-architect’, ‘backend-engineer’, ‘mobile-developer’, ‘devops-specialist’, ‘qa-engineer’, ‘product-manager’],
},
ui: {
theme: ‘dark’,
animations: true,
autoSave: true,
realTimePreview: true,
},
features: {
analytics: process.env.REACT_APP_ENABLE_ANALYTICS === ‘true’,
errorReporting: process.env.REACT_APP_ENABLE_ERROR_REPORTING === ‘true’,
realTime: process.env.REACT_APP_ENABLE_REAL_TIME === ‘true’,
aiSuggestions: process.env.REACT_APP_ENABLE_AI_SUGGESTIONS === ‘true’,
},
};

const ConfigContext = createContext<ConfigContextType | undefined>(undefined);

interface ConfigProviderProps {
children: ReactNode;
}

export const ConfigProvider: React.FC<ConfigProviderProps> = ({ children }) => {
const [config, setConfig] = useState<AppConfig>(defaultConfig);
const [isLoading, setIsLoading] = useState(true);
const [error, setError] = useState<string | null>(null);

useEffect(() => {
loadConfig();
}, []);

const loadConfig = async () => {
try {
setIsLoading(true);

```
  // Load config from localStorage
  const savedConfig = localStorage.getItem('crewai-builder-config');
  if (savedConfig) {
    const parsedConfig = JSON.parse(savedConfig);
    setConfig({ ...defaultConfig, ...parsedConfig });
  }

  // Validate required API keys
  if (!config.cerebras.apiKey) {
    setError('Cerebras API key is required. Please add it in settings.');
  } else {
    setError(null);
  }
} catch (err) {
  console.error('Failed to load config:', err);
  setError('Failed to load configuration');
} finally {
  setIsLoading(false);
}
```

};

const updateConfig = (updates: Partial<AppConfig>) => {
try {
const newConfig = { …config, …updates };
setConfig(newConfig);
localStorage.setItem(‘crewai-builder-config’, JSON.stringify(newConfig));
toast.success(‘Configuration updated successfully’);
setError(null);
} catch (err) {
console.error(‘Failed to update config:’, err);
toast.error(‘Failed to update configuration’);
}
};

return (
<ConfigContext.Provider value={{ config, updateConfig, isLoading, error }}>
{children}
</ConfigContext.Provider>
);
};

export const useConfig = () => {
const context = useContext(ConfigContext);
if (context === undefined) {
throw new Error(‘useConfig must be used within a ConfigProvider’);
}
return context;
};

// —————————————————————————–
// 8. ERROR BOUNDARY COMPONENT (src/components/ErrorBoundary.tsx)
// —————————————————————————–
import React, { Component, ErrorInfo, ReactNode } from ‘react’;
import { AlertCircle, RefreshCw } from ‘lucide-react’;

interface Props {
children: ReactNode;
}

interface State {
hasError: boolean;
error: Error | null;
errorInfo: ErrorInfo | null;
}

export class ErrorBoundary extends Component<Props, State> {
constructor(props: Props) {
super(props);
this.state = { hasError: false, error: null, errorInfo: null };
}

static getDerivedStateFromError(error: Error): State {
return { hasError: true, error, errorInfo: null };
}

componentDidCatch(error: Error, errorInfo: ErrorInfo) {
console.error(‘ErrorBoundary caught an error:’, error, errorInfo);
this.setState({
error,
errorInfo,
});

```
// Report to error tracking service
if (process.env.REACT_APP_SENTRY_DSN) {
  // Sentry.captureException(error, { contexts: { react: { componentStack: errorInfo.componentStack } } });
}
```

}

handleReload = () => {
window.location.reload();
};

render() {
if (this.state.hasError) {
return (
<div className="min-h-screen bg-gradient-to-br from-slate-900 via-red-900 to-slate-900 flex items-center justify-center p-4">
<div className="bg-black/30 backdrop-blur-md rounded-2xl p-8 max-w-lg w-full border border-white/10">
<div className="text-center">
<AlertCircle className="w-16 h-16 text-red-400 mx-auto mb-4" />
<h1 className="text-2xl font-bold text-white mb-4">Something went wrong</h1>
<p className="text-gray-300 mb-6">
We encountered an unexpected error. This has been reported to our team.
</p>

```
          {process.env.NODE_ENV === 'development' && (
            <details className="text-left mb-6 bg-black/20 rounded-lg p-4">
              <summary className="text-red-400 cursor-pointer mb-2">Error Details</summary>
              <pre className="text-xs text-gray-400 overflow-auto">
                {this.state.error && this.state.error.toString()}
                <br />
                {this.state.errorInfo.componentStack}
              </pre>
            </details>
          )}
          
          <button
            onClick={this.handleReload}
            className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-lg hover:from-red-700 hover:to-red-800 transition-all duration-200 mx-auto"
          >
            <RefreshCw className="w-4 h-4" />
            Reload Application
          </button>
        </div>
      </div>
    </div>
  );
}

return this.props.children;
```

}
}

// —————————————————————————–
// 9. CUSTOM HOOKS (src/hooks/index.ts)
// —————————————————————————–
import { useState, useEffect, useCallback, useRef } from ‘react’;
import { useQuery, useMutation, useQueryClient } from ‘react-query’;
import { Agent, GenerationRequest, GenerationResponse, AgentActivity } from ‘../types’;
import apiClient from ‘../services/apiClient’;
import toast from ‘react-hot-toast’;

// Hook for managing agents
export const useAgents = () => {
const [agents, setAgents] = useState<Agent[]>([]);
const [activity, setActivity] = useState<AgentActivity[]>([]);

const defaultAgents: Agent[] = [
{
id: ‘frontend-architect’,
name: ‘Frontend Architect’,
role: ‘UI/UX Designer & Frontend Developer’,
goal: ‘Create beautiful, responsive user interfaces with modern design principles’,
backstory: ‘Senior frontend architect with 8+ years of experience building award-winning applications for Fortune 500 companies.’,
tools: [‘React’, ‘Next.js’, ‘Tailwind CSS’, ‘TypeScript’, ‘Framer Motion’],
status: ‘ready’,
avatar: ‘🎨’,
expertise: 95,
completedTasks: 247
},
{
id: ‘backend-engineer’,
name: ‘Backend Engineer’,
role: ‘API & Database Specialist’,
goal: ‘Build scalable, secure backend services with robust APIs’,
backstory: ‘Full-stack engineer specialized in serverless architecture and microservices.’,
tools: [‘Node.js’, ‘PostgreSQL’, ‘Redis’, ‘AWS’, ‘GraphQL’],
status: ‘ready’,
avatar: ‘⚙️’,
expertise: 92,
completedTasks: 189
},
{
id: ‘mobile-developer’,
name: ‘Mobile Developer’,
role: ‘Cross-Platform Mobile Specialist’,
goal: ‘Create native-quality mobile applications’,
backstory: ‘Mobile expert with 15+ published apps averaging 4.8+ star ratings.’,
tools: [‘React Native’, ‘Flutter’, ‘Expo’, ‘Firebase’],
status: ‘ready’,
avatar: ‘📱’,
expertise: 88,
completedTasks: 156
},
{
id: ‘devops-specialist’,
name: ‘DevOps Specialist’,
role: ‘Deployment & Infrastructure Expert’,
goal: ‘Ensure reliable deployment and scalable infrastructure’,
backstory: ‘Cloud infrastructure expert managing applications serving 10M+ users.’,
tools: [‘Docker’, ‘Kubernetes’, ‘AWS’, ‘Terraform’],
status: ‘ready’,
avatar: ‘🚀’,
expertise: 90,
completedTasks: 134
},
{
id: ‘qa-engineer’,
name: ‘QA Engineer’,
role: ‘Testing & Quality Assurance’,
goal: ‘Ensure comprehensive testing and code quality’,
backstory: ‘QA engineer with expertise in automated testing and performance optimization.’,
tools: [‘Jest’, ‘Cypress’, ‘Playwright’, ‘Lighthouse’],
status: ‘ready’,
avatar: ‘🔍’,
expertise: 87,
completedTasks: 203
},
{
id: ‘product-manager’,
name: ‘Product Manager’,
role: ‘Feature Planning & User Experience’,
goal: ‘Define product requirements and ensure optimal UX’,
backstory: ‘Product strategist with 10+ years launching successful digital products.’,
tools: [‘Figma’, ‘Analytics’, ‘User Research’, ‘A/B Testing’],
status: ‘ready’,
avatar: ‘📊’,
expertise: 93,
completedTasks: 178
}
];

useEffect(() => {
setAgents(defaultAgents);
}, []);

const updateAgentStatus = useCallback((agentId: string, status: Agent[‘status’]) => {
setAgents(prev => prev.map(agent =>
agent.id === agentId ? { …agent, status } : agent
));
}, []);

const addActivity = useCallback((activity: Omit<AgentActivity, ‘id’>) => {
const newActivity: AgentActivity = {
…activity,
id: `activity_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
};
setActivity(prev => […prev, newActivity]);
}, []);

const clearActivity = useCallback(() => {
setActivity([]);
}, []);

return {
agents,
activity,
updateAgentStatus,
addActivity,
clearActivity,
};
};

// Hook for app generation
export const useAppGeneration = () => {
const queryClient = useQueryClient();

const generateAppMutation = useMutation(
async (request: GenerationRequest) => {
const response = await apiClient.crewai.orchestrateAgents(request);
return response;
},
{
onSuccess: (data) => {
toast.success(‘Application generated successfully!’);
queryClient.setQueryData(‘last-generation’, data);
},
onError: (error: any) => {
console.error(‘Generation failed:’, error);
toast.error(error.message || ‘Failed to generate application’);
},
}
);

return {
generateApp: generateAppMutation.mutate,
isGenerating: generateAppMutation.isLoading,
generationError: generateAppMutation.error,
lastGeneration: queryClient.getQueryData<GenerationResponse>(‘last-generation’),
};
};

// Hook for deployment
export const useDeployment = () => {
const deployMutation = useMutation(
async ({ code, platform, config }: { code: string; platform: string; config: any }) => {
switch (platform) {
case ‘vercel’:
return await apiClient.deployment.deployToVercel(code, config);
case ‘netlify’:
return await apiClient.deployment.deployToNetlify(code, config);
default:
throw new Error(`Unsupported platform: ${platform}`);
}
},
{
onSuccess: (data) => {
if (data.success) {
toast.success(`Deployed successfully! URL: ${data.url}`);
} else {
toast.error(data.error || ‘Deployment failed’);
}
},
onError: (error: any) => {
console.error(‘Deployment failed:’, error);
toast.error(error.message || ‘Deployment failed’);
},
}
);

return {
deploy: deployMutation.mutate,
isDeploying: deployMutation.isLoading,
deploymentResult: deployMutation.data,
deploymentError: deployMutation.error,
};
};

// Hook for real-time streaming
export const useStreamingGeneration = () => {
const [streamingContent, setStreamingContent] = useState(’’);
const [isStreaming, setIsStreaming] = useState(false);
const abortControllerRef = useRef<AbortController | null>(null);

const startStreaming = useCallback(async (prompt: string, options: any = {}) => {
setIsStreaming(true);
setStreamingContent(’’);
abortControllerRef.current = new AbortController();

```
try {
  for await (const chunk of apiClient.cerebras.streamCompletion(prompt, options)) {
    if (abortControllerRef.current?.signal.aborted) {
      break;
    }
    setStreamingContent(prev => prev + chunk);
  }
} catch (error: any) {
  if (!abortControllerRef.current?.signal.aborted) {
    console.error('Streaming error:', error);
    toast.error('Streaming generation failed');
  }
} finally {
  setIsStreaming(false);
}
```

}, []);

const stopStreaming = useCallback(() => {
abortControllerRef.current?.abort();
setIsStreaming(false);
}, []);

return {
streamingContent,
isStreaming,
startStreaming,
stopStreaming,
};
};

// Hook for local storage persistence
export const useLocalStorage = <T>(key: string, initialValue: T) => {
const [storedValue, setStoredValue] = useState<T>(() => {
try {
const item = window.localStorage.getItem(key);
return item ? JSON.parse(item) : initialValue;
} catch (error) {
console.error(`Error reading localStorage key "${key}":`, error);
return initialValue;
}
});

const setValue = useCallback((value: T | ((val: T) => T)) => {
try {
const valueToStore = value instanceof Function ? value(storedValue) : value;
setStoredValue(valueToStore);
window.localStorage.setItem(key, JSON.stringify(valueToStore));
} catch (error) {
console.error(`Error setting localStorage key "${key}":`, error);
}
}, [key, storedValue]);

const removeValue = useCallback(() => {
try {
window.localStorage.removeItem(key);
setStoredValue(initialValue);
} catch (error) {
console.error(`Error removing localStorage key "${key}":`, error);
}
}, [key, initialValue]);

return [storedValue, setValue, removeValue] as const;
};

// Hook for debounced values
export const useDebounce = <T>(value: T, delay: number): T => {
const [debouncedValue, setDebouncedValue] = useState<T>(value);

useEffect(() => {
const handler = setTimeout(() => {
setDebouncedValue(value);
}, delay);

```
return () => {
  clearTimeout(handler);
};
```

}, [value, delay]);

return debouncedValue;
};

// —————————————————————————–
// 10. UI COMPONENTS LIBRARY (src/components/ui/index.tsx)
// —————————————————————————–
import React from ‘react’;
import { cn } from ‘../../utils’;

// Button Component
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
variant?: ‘default’ | ‘destructive’ | ‘outline’ | ‘secondary’ | ‘ghost’ | ‘link’;
size?: ‘default’ | ‘sm’ | ‘lg’ | ‘icon’;
children: React.ReactNode;
}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
({ className, variant = “default”, size = “default”, children, …props }, ref) => {
const baseStyles = “inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background”;

```
const variants = {
  default: "bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg",
  destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
  outline: "border border-input hover:bg-accent hover:text-accent-foreground",
  secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  ghost: "hover:bg-accent hover:text-accent-foreground",
  link: "underline-offset-4 hover:underline text-primary",
};

const sizes = {
  default: "h-10 py-2 px-4",
  sm: "h-9 px-3 rounded-md",
  lg: "h-11 px-8 rounded-md",
  icon: "h-10 w-10",
};

return (
  <button
    className={cn(baseStyles, variants[variant], sizes[size], className)}
    ref={ref}
    {...props}
  >
    {children}
  </button>
);
```

}
);

// Card Components
interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
children: React.ReactNode;
}

export const Card = React.forwardRef<HTMLDivElement, CardProps>(
({ className, children, …props }, ref) => (
<div
ref={ref}
className={cn(“rounded-lg border bg-card text-card-foreground shadow-sm”, className)}
{…props}
>
{children}
</div>
)
);

export const CardHeader = React.forwardRef<HTMLDivElement, CardProps>(
({ className, children, …props }, ref) => (
<div
ref={ref}
className={cn(“flex flex-col space-y-1.5 p-6”, className)}
{…props}
>
{children}
</div>
)
);

export const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
({ className, children, …props }, ref) => (
<h3
ref={ref}
className={cn(“text-2xl font-semibold leading-none tracking-tight”, className)}
{…props}
>
{children}
</h3>
)
);

export const CardContent = React.forwardRef<HTMLDivElement, CardProps>(
({ className, children, …props }, ref) => (
<div ref={ref} className={cn(“p-6 pt-0”, className)} {…props}>
{children}
</div>
)
);

// Input Component
interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

export const Input = React.forwardRef<HTMLInputElement, InputProps>(
({ className, type, …props }, ref) => {
return (
<input
type={type}
className={cn(
“flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50”,
className
)}
ref={ref}
{…props}
/>
);
}
);

// Badge Component
interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
variant?: ‘default’ | ‘secondary’ | ‘destructive’ | ‘outline’;
children: React.ReactNode;
}

export const Badge: React.FC<BadgeProps> = ({ className, variant = “default”, children, …props }) => {
const variants = {
default: “bg-primary hover:bg-primary/80 text-primary-foreground”,
secondary: “bg-secondary hover:bg-secondary/80 text-secondary-foreground”,
destructive: “bg-destructive hover:bg-destructive/80 text-destructive-foreground”,
outline: “text-foreground border border-input”,
};

return (
<div
className={cn(
“inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2”,
variants[variant],
className
)}
{…props}
>
{children}
</div>
);
};

// Progress Component
interface ProgressProps extends React.HTMLAttributes<HTMLDivElement> {
value?: number;
max?: number;
}

export const Progress: React.FC<ProgressProps> = ({ className, value = 0, max = 100, …props }) => {
const percentage = Math.min(Math.max((value / max) * 100, 0), 100);

return (
<div
className={cn(“relative h-4 w-full overflow-hidden rounded-full bg-secondary”, className)}
{…props}
>
<div
className=“h-full w-full flex-1 bg-primary transition-all duration-300 ease-in-out”
style={{ width: `${percentage}%` }}
/>
</div>
);
};

// Textarea Component
interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

export const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
({ className, …props }, ref) => {
return (
<textarea
className={cn(
“flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50”,
className
)}
ref={ref}
{…props}
/>
);
}
);

// Select Component
interface SelectProps {
children: React.ReactNode;
value?: string;
onValueChange?: (value: string) => void;
}

export const Select: React.FC<SelectProps> = ({ children, value, onValueChange }) => {
return (
<div className="relative">
{children}
</div>
);
};

// Loading Spinner Component
interface LoadingSpinnerProps extends React.HTMLAttributes<HTMLDivElement> {
size?: ‘sm’ | ‘md’ | ‘lg’;
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
className,
size = ‘md’,
…props
}) => {
const sizes = {
sm: ‘w-4 h-4’,
md: ‘w-6 h-6’,
lg: ‘w-8 h-8’,
};

return (
<div
className={cn(
“animate-spin rounded-full border-2 border-gray-300 border-t-primary”,
sizes[size],
className
)}
{…props}
/>
);
};
