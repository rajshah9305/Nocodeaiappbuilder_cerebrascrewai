// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€“
// 11. MAIN CREWAI APP BUILDER COMPONENT (src/components/CrewAIAppBuilder.tsx)
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€“
import React, { useState, useEffect, useRef, useCallback } from â€˜reactâ€™;
import { motion, AnimatePresence } from â€˜framer-motionâ€™;
import {
Play, Zap, Code, Eye, Settings, Users, Sparkles, Cpu, Brain,
Rocket, Globe, Database, Shield, Terminal, Monitor, Layers,
GitBranch, Download, Copy, ExternalLink, CheckCircle, XCircle,
Clock, TrendingUp, BarChart3, Smartphone, Server, TestTube
} from â€˜lucide-reactâ€™;
import { Prism as SyntaxHighlighter } from â€˜react-syntax-highlighterâ€™;
import { vscDarkPlus } from â€˜react-syntax-highlighter/dist/esm/styles/prismâ€™;
import toast from â€˜react-hot-toastâ€™;
import { saveAs } from â€˜file-saverâ€™;

import { useAgents, useAppGeneration, useDeployment, useStreamingGeneration, useLocalStorage } from â€˜../hooksâ€™;
import { useConfig } from â€˜../contexts/ConfigContextâ€™;
import { Button, Card, CardContent, CardHeader, CardTitle, Input, Badge, Progress, Textarea, LoadingSpinner } from â€˜./uiâ€™;
import { cn } from â€˜../utilsâ€™;
import { Template, Agent, GenerationRequest } from â€˜../typesâ€™;

const CrewAIAppBuilder: React.FC = () => {
// State management
const [activeTab, setActiveTab] = useState<â€˜builderâ€™ | â€˜agentsâ€™ | â€˜templatesâ€™ | â€˜settingsâ€™>(â€˜builderâ€™);
const [prompt, setPrompt] = useLocalStorage(â€˜crewai-promptâ€™, â€˜â€™);
const [selectedTemplate, setSelectedTemplate] = useState<string>(â€™â€™);
const [generatedCode, setGeneratedCode] = useState<string>(â€™â€™);
const [previewApp, setPreviewApp] = useState<string>(â€™â€™);
const [progress, setProgress] = useState<number>(0);
const [showCode, setShowCode] = useState<boolean>(true);
const [isFullscreen, setIsFullscreen] = useState<boolean>(false);

// Hooks
const { config, updateConfig } = useConfig();
const { agents, activity, updateAgentStatus, addActivity, clearActivity } = useAgents();
const { generateApp, isGenerating, generationError, lastGeneration } = useAppGeneration();
const { deploy, isDeploying, deploymentResult } = useDeployment();
const { streamingContent, isStreaming, startStreaming, stopStreaming } = useStreamingGeneration();

// Refs
const codeEditorRef = useRef<HTMLDivElement>(null);
const previewRef = useRef<HTMLIFrameElement>(null);

// Templates data
const templates: Template[] = [
{
id: â€˜saas-dashboardâ€™,
name: â€˜SaaS Dashboardâ€™,
description: â€˜Modern SaaS application with authentication, billing, analytics, and admin panelâ€™,
category: â€˜Businessâ€™,
features: [â€˜User Authenticationâ€™, â€˜Stripe Integrationâ€™, â€˜Analytics Dashboardâ€™, â€˜Admin Panelâ€™, â€˜API Managementâ€™],
icon: â€˜ðŸ’¼â€™,
estimatedTime: â€˜2-3 hoursâ€™,
complexity: â€˜Advancedâ€™,
techStack: [â€˜Reactâ€™, â€˜Node.jsâ€™, â€˜PostgreSQLâ€™, â€˜Stripe APIâ€™]
},
{
id: â€˜ecommerce-storeâ€™,
name: â€˜E-commerce Storeâ€™,
description: â€˜Full-featured online store with cart, payments, inventory, and order managementâ€™,
category: â€˜E-commerceâ€™,
features: [â€˜Shopping Cartâ€™, â€˜Payment Processingâ€™, â€˜Inventory Managementâ€™, â€˜Order Trackingâ€™, â€˜Product Reviewsâ€™],
icon: â€˜ðŸ›’â€™,
estimatedTime: â€˜3-4 hoursâ€™,
complexity: â€˜Advancedâ€™,
techStack: [â€˜Next.jsâ€™, â€˜Stripeâ€™, â€˜MongoDBâ€™, â€˜Redisâ€™]
},
{
id: â€˜social-platformâ€™,
name: â€˜Social Platformâ€™,
description: â€˜Social media application with posts, messaging, real-time notificationsâ€™,
category: â€˜Socialâ€™,
features: [â€˜Real-time Chatâ€™, â€˜Posts & Feedsâ€™, â€˜User Profilesâ€™, â€˜Push Notificationsâ€™, â€˜Media Uploadâ€™],
icon: â€˜ðŸ‘¥â€™,
estimatedTime: â€˜4-5 hoursâ€™,
complexity: â€˜Expertâ€™,
techStack: [â€˜Reactâ€™, â€˜WebSocketâ€™, â€˜Firebaseâ€™, â€˜Cloudinaryâ€™]
},
{
id: â€˜learning-platformâ€™,
name: â€˜Learning Platformâ€™,
description: â€˜Educational platform with courses, video streaming, quizzes, progress trackingâ€™,
category: â€˜Educationâ€™,
features: [â€˜Course Managementâ€™, â€˜Video Streamingâ€™, â€˜Interactive Quizzesâ€™, â€˜Progress Trackingâ€™, â€˜Certificatesâ€™],
icon: â€˜ðŸŽ“â€™,
estimatedTime: â€˜3-4 hoursâ€™,
complexity: â€˜Advancedâ€™,
techStack: [â€˜Reactâ€™, â€˜AWS S3â€™, â€˜PostgreSQLâ€™, â€˜FFmpegâ€™]
},
{
id: â€˜crm-systemâ€™,
name: â€˜CRM Systemâ€™,
description: â€˜Customer relationship management with lead tracking, sales pipelineâ€™,
category: â€˜Businessâ€™,
features: [â€˜Lead Managementâ€™, â€˜Sales Pipelineâ€™, â€˜Email Integrationâ€™, â€˜Reportingâ€™, â€˜Contact Managementâ€™],
icon: â€˜ðŸ“ˆâ€™,
estimatedTime: â€˜2-3 hoursâ€™,
complexity: â€˜Intermediateâ€™,
techStack: [â€˜Reactâ€™, â€˜Node.jsâ€™,
